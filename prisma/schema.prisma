generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model AdminUser {
    id    String @id @default(cuid())
    email String @unique

    @@map("admin_users")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    Customer Customer[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

model Customer {
    firstName    String         @default("")
    lastName     String         @default("")
    phoneNumber  String         @default("")
    orderHistory OrderHistory[]

    customer   User   @relation(fields: [customerId], references: [id])
    customerId String @id

    @@map("customers")
}

model Product {
    id          String    @id @default(cuid())
    name        String    @unique
    description String
    quantity    Int
    price       Float
    image       String
    isVisible   Boolean   @default(true)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime?

    @@map("products")
}

model OrderHistory {
    id         String      @id @default(cuid())
    isPaid     Boolean
    isDone     Boolean     @default(false)
    slipImage  String?
    date       DateTime
    total      Float
    items      OrderItem[]
    createdAt  DateTime    @default(now())
    updatedAt  DateTime?
    Customer   Customer?   @relation(fields: [customerId], references: [customerId])
    customerId String?

    @@map("order_histories")
}

model OrderItem {
    id             Int           @id @default(autoincrement())
    productName    String
    productPrice   Float
    quantity       Int
    orderHistory   OrderHistory? @relation(fields: [orderHistoryId], references: [id])
    orderHistoryId String?

    @@map("order_items")
}
